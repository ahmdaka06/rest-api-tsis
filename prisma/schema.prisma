// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EnumRole {
  ADMIN
  DOSEN
  MAHASISWA
}

enum EnumGender {
  MALE
  FEMALE
}

model User {
  id       Int     @id @default(autoincrement())
  uniq_id  String  @unique @db.VarChar(100)
  name     String  @db.VarChar(100)
  email    String  @db.VarChar(100)
  username String  @db.VarChar(100) @unique
  password String  @db.VarChar(100)
  role     EnumRole
  token    String? @db.LongText

  user_detail UserDetail?
  articles Articles[]
  journals Journal[]

  @@map("users")
}

model UserDetail {
  id                Int     @id @default(autoincrement())
  user_id           Int  @unique
  address           String? @db.LongText
  place_of_birth    String? @db.VarChar(100)
  date_of_birth     DateTime? @db.Date
  gender            EnumGender
  phone_number      String? @db.VarChar(50)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [user_id], references: [id])
  @@map("user_details")
}

model Articles {
  id          Int     @id @default(autoincrement())
  user_id     Int
  title       String  @unique@db.VarChar(255)
  url         String  @db.VarChar(255)
  thumbnail   String  @db.VarChar(255)
  content     String  @db.LongText
  is_published Boolean @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user        User     @relation(fields: [user_id], references: [id])

  @@map("articles")
}

model Journal {
  id          Int     @id @default(autoincrement())
  user_id     Int
  title       String  @db.VarChar(255) @unique
  url         String  @db.VarChar(255)
  thumbnail   String  @db.VarChar(255)
  content     String  @db.LongText
  is_published Boolean @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user        User     @relation(fields: [user_id], references: [id])
}

